// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
class HeartData;
struct HeartDataDefaultTypeInternal;
extern HeartDataDefaultTypeInternal _HeartData_default_instance_;
class PkgData;
struct PkgDataDefaultTypeInternal;
extern PkgDataDefaultTypeInternal _PkgData_default_instance_;
class PlantData;
struct PlantDataDefaultTypeInternal;
extern PlantDataDefaultTypeInternal _PlantData_default_instance_;
class PlantPlacementData;
struct PlantPlacementDataDefaultTypeInternal;
extern PlantPlacementDataDefaultTypeInternal _PlantPlacementData_default_instance_;
class PlantRefreshData;
struct PlantRefreshDataDefaultTypeInternal;
extern PlantRefreshDataDefaultTypeInternal _PlantRefreshData_default_instance_;
class SunData;
struct SunDataDefaultTypeInternal;
extern SunDataDefaultTypeInternal _SunData_default_instance_;
class ZombieData;
struct ZombieDataDefaultTypeInternal;
extern ZombieDataDefaultTypeInternal _ZombieData_default_instance_;
class ZombieRefreshData;
struct ZombieRefreshDataDefaultTypeInternal;
extern ZombieRefreshDataDefaultTypeInternal _ZombieRefreshData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HeartData* Arena::CreateMaybeMessage<::HeartData>(Arena*);
template<> ::PkgData* Arena::CreateMaybeMessage<::PkgData>(Arena*);
template<> ::PlantData* Arena::CreateMaybeMessage<::PlantData>(Arena*);
template<> ::PlantPlacementData* Arena::CreateMaybeMessage<::PlantPlacementData>(Arena*);
template<> ::PlantRefreshData* Arena::CreateMaybeMessage<::PlantRefreshData>(Arena*);
template<> ::SunData* Arena::CreateMaybeMessage<::SunData>(Arena*);
template<> ::ZombieData* Arena::CreateMaybeMessage<::ZombieData>(Arena*);
template<> ::ZombieRefreshData* Arena::CreateMaybeMessage<::ZombieRefreshData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PkgData_DataType : int {
  PkgData_DataType_HELLO = 0,
  PkgData_DataType_HEART = 1,
  PkgData_DataType_PLANT_REFRESH = 2,
  PkgData_DataType_PLANT_PLACEMENT = 3,
  PkgData_DataType_ZOMBIE_REFRESH = 4,
  PkgData_DataType_ZOMBIE_GENARATION = 5,
  PkgData_DataType_SUN_FRESH = 6,
  PkgData_DataType_PkgData_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PkgData_DataType_PkgData_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PkgData_DataType_IsValid(int value);
constexpr PkgData_DataType PkgData_DataType_DataType_MIN = PkgData_DataType_HELLO;
constexpr PkgData_DataType PkgData_DataType_DataType_MAX = PkgData_DataType_SUN_FRESH;
constexpr int PkgData_DataType_DataType_ARRAYSIZE = PkgData_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PkgData_DataType_descriptor();
template<typename T>
inline const std::string& PkgData_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PkgData_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PkgData_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PkgData_DataType_descriptor(), enum_t_value);
}
inline bool PkgData_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PkgData_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PkgData_DataType>(
    PkgData_DataType_descriptor(), name, value);
}
// ===================================================================

class PkgData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PkgData) */ {
 public:
  inline PkgData() : PkgData(nullptr) {}
  ~PkgData() override;
  explicit PROTOBUF_CONSTEXPR PkgData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PkgData(const PkgData& from);
  PkgData(PkgData&& from) noexcept
    : PkgData() {
    *this = ::std::move(from);
  }

  inline PkgData& operator=(const PkgData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PkgData& operator=(PkgData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PkgData& default_instance() {
    return *internal_default_instance();
  }
  enum ContentCase {
    kSun = 3,
    kPlantRefresh = 4,
    kZombieRefresh = 5,
    CONTENT_NOT_SET = 0,
  };

  static inline const PkgData* internal_default_instance() {
    return reinterpret_cast<const PkgData*>(
               &_PkgData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PkgData& a, PkgData& b) {
    a.Swap(&b);
  }
  inline void Swap(PkgData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PkgData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PkgData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PkgData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PkgData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PkgData& from) {
    PkgData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PkgData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PkgData";
  }
  protected:
  explicit PkgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PkgData_DataType DataType;
  static constexpr DataType HELLO =
    PkgData_DataType_HELLO;
  static constexpr DataType HEART =
    PkgData_DataType_HEART;
  static constexpr DataType PLANT_REFRESH =
    PkgData_DataType_PLANT_REFRESH;
  static constexpr DataType PLANT_PLACEMENT =
    PkgData_DataType_PLANT_PLACEMENT;
  static constexpr DataType ZOMBIE_REFRESH =
    PkgData_DataType_ZOMBIE_REFRESH;
  static constexpr DataType ZOMBIE_GENARATION =
    PkgData_DataType_ZOMBIE_GENARATION;
  static constexpr DataType SUN_FRESH =
    PkgData_DataType_SUN_FRESH;
  static inline bool DataType_IsValid(int value) {
    return PkgData_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    PkgData_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    PkgData_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    PkgData_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return PkgData_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return PkgData_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return PkgData_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPlayerIdFieldNumber = 6,
    kSunFieldNumber = 3,
    kPlantRefreshFieldNumber = 4,
    kZombieRefreshFieldNumber = 5,
  };
  // string playerName = 1;
  void clear_playername();
  const std::string& playername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playername();
  PROTOBUF_NODISCARD std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // .PkgData.DataType type = 2;
  void clear_type();
  ::PkgData_DataType type() const;
  void set_type(::PkgData_DataType value);
  private:
  ::PkgData_DataType _internal_type() const;
  void _internal_set_type(::PkgData_DataType value);
  public:

  // int32 playerId = 6;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // .SunData sun = 3;
  bool has_sun() const;
  private:
  bool _internal_has_sun() const;
  public:
  void clear_sun();
  const ::SunData& sun() const;
  PROTOBUF_NODISCARD ::SunData* release_sun();
  ::SunData* mutable_sun();
  void set_allocated_sun(::SunData* sun);
  private:
  const ::SunData& _internal_sun() const;
  ::SunData* _internal_mutable_sun();
  public:
  void unsafe_arena_set_allocated_sun(
      ::SunData* sun);
  ::SunData* unsafe_arena_release_sun();

  // .PlantRefreshData plantRefresh = 4;
  bool has_plantrefresh() const;
  private:
  bool _internal_has_plantrefresh() const;
  public:
  void clear_plantrefresh();
  const ::PlantRefreshData& plantrefresh() const;
  PROTOBUF_NODISCARD ::PlantRefreshData* release_plantrefresh();
  ::PlantRefreshData* mutable_plantrefresh();
  void set_allocated_plantrefresh(::PlantRefreshData* plantrefresh);
  private:
  const ::PlantRefreshData& _internal_plantrefresh() const;
  ::PlantRefreshData* _internal_mutable_plantrefresh();
  public:
  void unsafe_arena_set_allocated_plantrefresh(
      ::PlantRefreshData* plantrefresh);
  ::PlantRefreshData* unsafe_arena_release_plantrefresh();

  // .ZombieRefreshData zombieRefresh = 5;
  bool has_zombierefresh() const;
  private:
  bool _internal_has_zombierefresh() const;
  public:
  void clear_zombierefresh();
  const ::ZombieRefreshData& zombierefresh() const;
  PROTOBUF_NODISCARD ::ZombieRefreshData* release_zombierefresh();
  ::ZombieRefreshData* mutable_zombierefresh();
  void set_allocated_zombierefresh(::ZombieRefreshData* zombierefresh);
  private:
  const ::ZombieRefreshData& _internal_zombierefresh() const;
  ::ZombieRefreshData* _internal_mutable_zombierefresh();
  public:
  void unsafe_arena_set_allocated_zombierefresh(
      ::ZombieRefreshData* zombierefresh);
  ::ZombieRefreshData* unsafe_arena_release_zombierefresh();

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:PkgData)
 private:
  class _Internal;
  void set_has_sun();
  void set_has_plantrefresh();
  void set_has_zombierefresh();

  inline bool has_content() const;
  inline void clear_has_content();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
    int type_;
    int32_t playerid_;
    union ContentUnion {
      constexpr ContentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::SunData* sun_;
      ::PlantRefreshData* plantrefresh_;
      ::ZombieRefreshData* zombierefresh_;
    } content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class HeartData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HeartData) */ {
 public:
  inline HeartData() : HeartData(nullptr) {}
  ~HeartData() override;
  explicit PROTOBUF_CONSTEXPR HeartData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartData(const HeartData& from);
  HeartData(HeartData&& from) noexcept
    : HeartData() {
    *this = ::std::move(from);
  }

  inline HeartData& operator=(const HeartData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartData& operator=(HeartData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartData* internal_default_instance() {
    return reinterpret_cast<const HeartData*>(
               &_HeartData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HeartData& a, HeartData& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartData& from) {
    HeartData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HeartData";
  }
  protected:
  explicit HeartData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HeartData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class SunData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SunData) */ {
 public:
  inline SunData() : SunData(nullptr) {}
  ~SunData() override;
  explicit PROTOBUF_CONSTEXPR SunData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SunData(const SunData& from);
  SunData(SunData&& from) noexcept
    : SunData() {
    *this = ::std::move(from);
  }

  inline SunData& operator=(const SunData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SunData& operator=(SunData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SunData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SunData* internal_default_instance() {
    return reinterpret_cast<const SunData*>(
               &_SunData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SunData& a, SunData& b) {
    a.Swap(&b);
  }
  inline void Swap(SunData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SunData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SunData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SunData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SunData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SunData& from) {
    SunData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SunData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SunData";
  }
  protected:
  explicit SunData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSunValueFieldNumber = 1,
  };
  // int32 sunValue = 1;
  void clear_sunvalue();
  int32_t sunvalue() const;
  void set_sunvalue(int32_t value);
  private:
  int32_t _internal_sunvalue() const;
  void _internal_set_sunvalue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SunData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t sunvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class PlantData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlantData) */ {
 public:
  inline PlantData() : PlantData(nullptr) {}
  ~PlantData() override;
  explicit PROTOBUF_CONSTEXPR PlantData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlantData(const PlantData& from);
  PlantData(PlantData&& from) noexcept
    : PlantData() {
    *this = ::std::move(from);
  }

  inline PlantData& operator=(const PlantData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlantData& operator=(PlantData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlantData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlantData* internal_default_instance() {
    return reinterpret_cast<const PlantData*>(
               &_PlantData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlantData& a, PlantData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlantData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlantData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlantData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlantData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlantData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlantData& from) {
    PlantData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlantData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlantData";
  }
  protected:
  explicit PlantData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kRowFieldNumber = 2,
    kTypeFieldNumber = 3,
    kHpFieldNumber = 4,
    kMaxHpFieldNumber = 5,
  };
  // int32 line = 1;
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // int32 row = 2;
  void clear_row();
  int32_t row() const;
  void set_row(int32_t value);
  private:
  int32_t _internal_row() const;
  void _internal_set_row(int32_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 hp = 4;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // int32 maxHp = 5;
  void clear_maxhp();
  int32_t maxhp() const;
  void set_maxhp(int32_t value);
  private:
  int32_t _internal_maxhp() const;
  void _internal_set_maxhp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PlantData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t line_;
    int32_t row_;
    int32_t type_;
    int32_t hp_;
    int32_t maxhp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class PlantRefreshData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlantRefreshData) */ {
 public:
  inline PlantRefreshData() : PlantRefreshData(nullptr) {}
  ~PlantRefreshData() override;
  explicit PROTOBUF_CONSTEXPR PlantRefreshData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlantRefreshData(const PlantRefreshData& from);
  PlantRefreshData(PlantRefreshData&& from) noexcept
    : PlantRefreshData() {
    *this = ::std::move(from);
  }

  inline PlantRefreshData& operator=(const PlantRefreshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlantRefreshData& operator=(PlantRefreshData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlantRefreshData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlantRefreshData* internal_default_instance() {
    return reinterpret_cast<const PlantRefreshData*>(
               &_PlantRefreshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlantRefreshData& a, PlantRefreshData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlantRefreshData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlantRefreshData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlantRefreshData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlantRefreshData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlantRefreshData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlantRefreshData& from) {
    PlantRefreshData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlantRefreshData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlantRefreshData";
  }
  protected:
  explicit PlantRefreshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlantsFieldNumber = 1,
  };
  // repeated .PlantData plants = 1;
  int plants_size() const;
  private:
  int _internal_plants_size() const;
  public:
  void clear_plants();
  ::PlantData* mutable_plants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlantData >*
      mutable_plants();
  private:
  const ::PlantData& _internal_plants(int index) const;
  ::PlantData* _internal_add_plants();
  public:
  const ::PlantData& plants(int index) const;
  ::PlantData* add_plants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlantData >&
      plants() const;

  // @@protoc_insertion_point(class_scope:PlantRefreshData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlantData > plants_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class PlantPlacementData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlantPlacementData) */ {
 public:
  inline PlantPlacementData() : PlantPlacementData(nullptr) {}
  ~PlantPlacementData() override;
  explicit PROTOBUF_CONSTEXPR PlantPlacementData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlantPlacementData(const PlantPlacementData& from);
  PlantPlacementData(PlantPlacementData&& from) noexcept
    : PlantPlacementData() {
    *this = ::std::move(from);
  }

  inline PlantPlacementData& operator=(const PlantPlacementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlantPlacementData& operator=(PlantPlacementData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlantPlacementData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlantPlacementData* internal_default_instance() {
    return reinterpret_cast<const PlantPlacementData*>(
               &_PlantPlacementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlantPlacementData& a, PlantPlacementData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlantPlacementData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlantPlacementData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlantPlacementData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlantPlacementData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlantPlacementData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlantPlacementData& from) {
    PlantPlacementData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlantPlacementData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlantPlacementData";
  }
  protected:
  explicit PlantPlacementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlantFieldNumber = 1,
  };
  // .PlantData plant = 1;
  bool has_plant() const;
  private:
  bool _internal_has_plant() const;
  public:
  void clear_plant();
  const ::PlantData& plant() const;
  PROTOBUF_NODISCARD ::PlantData* release_plant();
  ::PlantData* mutable_plant();
  void set_allocated_plant(::PlantData* plant);
  private:
  const ::PlantData& _internal_plant() const;
  ::PlantData* _internal_mutable_plant();
  public:
  void unsafe_arena_set_allocated_plant(
      ::PlantData* plant);
  ::PlantData* unsafe_arena_release_plant();

  // @@protoc_insertion_point(class_scope:PlantPlacementData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PlantData* plant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ZombieData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZombieData) */ {
 public:
  inline ZombieData() : ZombieData(nullptr) {}
  ~ZombieData() override;
  explicit PROTOBUF_CONSTEXPR ZombieData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZombieData(const ZombieData& from);
  ZombieData(ZombieData&& from) noexcept
    : ZombieData() {
    *this = ::std::move(from);
  }

  inline ZombieData& operator=(const ZombieData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZombieData& operator=(ZombieData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZombieData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZombieData* internal_default_instance() {
    return reinterpret_cast<const ZombieData*>(
               &_ZombieData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ZombieData& a, ZombieData& b) {
    a.Swap(&b);
  }
  inline void Swap(ZombieData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZombieData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZombieData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZombieData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZombieData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZombieData& from) {
    ZombieData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZombieData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZombieData";
  }
  protected:
  explicit ZombieData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kXFieldNumber = 2,
    kTypeFieldNumber = 3,
    kHpFieldNumber = 4,
    kMaxHpFieldNumber = 5,
  };
  // int32 line = 1;
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 hp = 4;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // int32 maxHp = 5;
  void clear_maxhp();
  int32_t maxhp() const;
  void set_maxhp(int32_t value);
  private:
  int32_t _internal_maxhp() const;
  void _internal_set_maxhp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ZombieData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t line_;
    float x_;
    int32_t type_;
    int32_t hp_;
    int32_t maxhp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class ZombieRefreshData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZombieRefreshData) */ {
 public:
  inline ZombieRefreshData() : ZombieRefreshData(nullptr) {}
  ~ZombieRefreshData() override;
  explicit PROTOBUF_CONSTEXPR ZombieRefreshData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZombieRefreshData(const ZombieRefreshData& from);
  ZombieRefreshData(ZombieRefreshData&& from) noexcept
    : ZombieRefreshData() {
    *this = ::std::move(from);
  }

  inline ZombieRefreshData& operator=(const ZombieRefreshData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZombieRefreshData& operator=(ZombieRefreshData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ZombieRefreshData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZombieRefreshData* internal_default_instance() {
    return reinterpret_cast<const ZombieRefreshData*>(
               &_ZombieRefreshData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ZombieRefreshData& a, ZombieRefreshData& b) {
    a.Swap(&b);
  }
  inline void Swap(ZombieRefreshData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZombieRefreshData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZombieRefreshData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZombieRefreshData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ZombieRefreshData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ZombieRefreshData& from) {
    ZombieRefreshData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZombieRefreshData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZombieRefreshData";
  }
  protected:
  explicit ZombieRefreshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZombiesFieldNumber = 1,
  };
  // repeated .ZombieData zombies = 1;
  int zombies_size() const;
  private:
  int _internal_zombies_size() const;
  public:
  void clear_zombies();
  ::ZombieData* mutable_zombies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZombieData >*
      mutable_zombies();
  private:
  const ::ZombieData& _internal_zombies(int index) const;
  ::ZombieData* _internal_add_zombies();
  public:
  const ::ZombieData& zombies(int index) const;
  ::ZombieData* add_zombies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZombieData >&
      zombies() const;

  // @@protoc_insertion_point(class_scope:ZombieRefreshData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZombieData > zombies_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PkgData

// int32 playerId = 6;
inline void PkgData::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t PkgData::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t PkgData::playerid() const {
  // @@protoc_insertion_point(field_get:PkgData.playerId)
  return _internal_playerid();
}
inline void PkgData::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void PkgData::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:PkgData.playerId)
}

// string playerName = 1;
inline void PkgData::clear_playername() {
  _impl_.playername_.ClearToEmpty();
}
inline const std::string& PkgData::playername() const {
  // @@protoc_insertion_point(field_get:PkgData.playerName)
  return _internal_playername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PkgData::set_playername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.playername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PkgData.playerName)
}
inline std::string* PkgData::mutable_playername() {
  std::string* _s = _internal_mutable_playername();
  // @@protoc_insertion_point(field_mutable:PkgData.playerName)
  return _s;
}
inline const std::string& PkgData::_internal_playername() const {
  return _impl_.playername_.Get();
}
inline void PkgData::_internal_set_playername(const std::string& value) {
  
  _impl_.playername_.Set(value, GetArenaForAllocation());
}
inline std::string* PkgData::_internal_mutable_playername() {
  
  return _impl_.playername_.Mutable(GetArenaForAllocation());
}
inline std::string* PkgData::release_playername() {
  // @@protoc_insertion_point(field_release:PkgData.playerName)
  return _impl_.playername_.Release();
}
inline void PkgData::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  _impl_.playername_.SetAllocated(playername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.playername_.IsDefault()) {
    _impl_.playername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PkgData.playerName)
}

// .PkgData.DataType type = 2;
inline void PkgData::clear_type() {
  _impl_.type_ = 0;
}
inline ::PkgData_DataType PkgData::_internal_type() const {
  return static_cast< ::PkgData_DataType >(_impl_.type_);
}
inline ::PkgData_DataType PkgData::type() const {
  // @@protoc_insertion_point(field_get:PkgData.type)
  return _internal_type();
}
inline void PkgData::_internal_set_type(::PkgData_DataType value) {
  
  _impl_.type_ = value;
}
inline void PkgData::set_type(::PkgData_DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PkgData.type)
}

// .SunData sun = 3;
inline bool PkgData::_internal_has_sun() const {
  return content_case() == kSun;
}
inline bool PkgData::has_sun() const {
  return _internal_has_sun();
}
inline void PkgData::set_has_sun() {
  _impl_._oneof_case_[0] = kSun;
}
inline void PkgData::clear_sun() {
  if (_internal_has_sun()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.sun_;
    }
    clear_has_content();
  }
}
inline ::SunData* PkgData::release_sun() {
  // @@protoc_insertion_point(field_release:PkgData.sun)
  if (_internal_has_sun()) {
    clear_has_content();
    ::SunData* temp = _impl_.content_.sun_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.sun_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::SunData& PkgData::_internal_sun() const {
  return _internal_has_sun()
      ? *_impl_.content_.sun_
      : reinterpret_cast< ::SunData&>(::_SunData_default_instance_);
}
inline const ::SunData& PkgData::sun() const {
  // @@protoc_insertion_point(field_get:PkgData.sun)
  return _internal_sun();
}
inline ::SunData* PkgData::unsafe_arena_release_sun() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PkgData.sun)
  if (_internal_has_sun()) {
    clear_has_content();
    ::SunData* temp = _impl_.content_.sun_;
    _impl_.content_.sun_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PkgData::unsafe_arena_set_allocated_sun(::SunData* sun) {
  clear_content();
  if (sun) {
    set_has_sun();
    _impl_.content_.sun_ = sun;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PkgData.sun)
}
inline ::SunData* PkgData::_internal_mutable_sun() {
  if (!_internal_has_sun()) {
    clear_content();
    set_has_sun();
    _impl_.content_.sun_ = CreateMaybeMessage< ::SunData >(GetArenaForAllocation());
  }
  return _impl_.content_.sun_;
}
inline ::SunData* PkgData::mutable_sun() {
  ::SunData* _msg = _internal_mutable_sun();
  // @@protoc_insertion_point(field_mutable:PkgData.sun)
  return _msg;
}

// .PlantRefreshData plantRefresh = 4;
inline bool PkgData::_internal_has_plantrefresh() const {
  return content_case() == kPlantRefresh;
}
inline bool PkgData::has_plantrefresh() const {
  return _internal_has_plantrefresh();
}
inline void PkgData::set_has_plantrefresh() {
  _impl_._oneof_case_[0] = kPlantRefresh;
}
inline void PkgData::clear_plantrefresh() {
  if (_internal_has_plantrefresh()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.plantrefresh_;
    }
    clear_has_content();
  }
}
inline ::PlantRefreshData* PkgData::release_plantrefresh() {
  // @@protoc_insertion_point(field_release:PkgData.plantRefresh)
  if (_internal_has_plantrefresh()) {
    clear_has_content();
    ::PlantRefreshData* temp = _impl_.content_.plantrefresh_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.plantrefresh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PlantRefreshData& PkgData::_internal_plantrefresh() const {
  return _internal_has_plantrefresh()
      ? *_impl_.content_.plantrefresh_
      : reinterpret_cast< ::PlantRefreshData&>(::_PlantRefreshData_default_instance_);
}
inline const ::PlantRefreshData& PkgData::plantrefresh() const {
  // @@protoc_insertion_point(field_get:PkgData.plantRefresh)
  return _internal_plantrefresh();
}
inline ::PlantRefreshData* PkgData::unsafe_arena_release_plantrefresh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PkgData.plantRefresh)
  if (_internal_has_plantrefresh()) {
    clear_has_content();
    ::PlantRefreshData* temp = _impl_.content_.plantrefresh_;
    _impl_.content_.plantrefresh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PkgData::unsafe_arena_set_allocated_plantrefresh(::PlantRefreshData* plantrefresh) {
  clear_content();
  if (plantrefresh) {
    set_has_plantrefresh();
    _impl_.content_.plantrefresh_ = plantrefresh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PkgData.plantRefresh)
}
inline ::PlantRefreshData* PkgData::_internal_mutable_plantrefresh() {
  if (!_internal_has_plantrefresh()) {
    clear_content();
    set_has_plantrefresh();
    _impl_.content_.plantrefresh_ = CreateMaybeMessage< ::PlantRefreshData >(GetArenaForAllocation());
  }
  return _impl_.content_.plantrefresh_;
}
inline ::PlantRefreshData* PkgData::mutable_plantrefresh() {
  ::PlantRefreshData* _msg = _internal_mutable_plantrefresh();
  // @@protoc_insertion_point(field_mutable:PkgData.plantRefresh)
  return _msg;
}

// .ZombieRefreshData zombieRefresh = 5;
inline bool PkgData::_internal_has_zombierefresh() const {
  return content_case() == kZombieRefresh;
}
inline bool PkgData::has_zombierefresh() const {
  return _internal_has_zombierefresh();
}
inline void PkgData::set_has_zombierefresh() {
  _impl_._oneof_case_[0] = kZombieRefresh;
}
inline void PkgData::clear_zombierefresh() {
  if (_internal_has_zombierefresh()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.content_.zombierefresh_;
    }
    clear_has_content();
  }
}
inline ::ZombieRefreshData* PkgData::release_zombierefresh() {
  // @@protoc_insertion_point(field_release:PkgData.zombieRefresh)
  if (_internal_has_zombierefresh()) {
    clear_has_content();
    ::ZombieRefreshData* temp = _impl_.content_.zombierefresh_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.content_.zombierefresh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ZombieRefreshData& PkgData::_internal_zombierefresh() const {
  return _internal_has_zombierefresh()
      ? *_impl_.content_.zombierefresh_
      : reinterpret_cast< ::ZombieRefreshData&>(::_ZombieRefreshData_default_instance_);
}
inline const ::ZombieRefreshData& PkgData::zombierefresh() const {
  // @@protoc_insertion_point(field_get:PkgData.zombieRefresh)
  return _internal_zombierefresh();
}
inline ::ZombieRefreshData* PkgData::unsafe_arena_release_zombierefresh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PkgData.zombieRefresh)
  if (_internal_has_zombierefresh()) {
    clear_has_content();
    ::ZombieRefreshData* temp = _impl_.content_.zombierefresh_;
    _impl_.content_.zombierefresh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PkgData::unsafe_arena_set_allocated_zombierefresh(::ZombieRefreshData* zombierefresh) {
  clear_content();
  if (zombierefresh) {
    set_has_zombierefresh();
    _impl_.content_.zombierefresh_ = zombierefresh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PkgData.zombieRefresh)
}
inline ::ZombieRefreshData* PkgData::_internal_mutable_zombierefresh() {
  if (!_internal_has_zombierefresh()) {
    clear_content();
    set_has_zombierefresh();
    _impl_.content_.zombierefresh_ = CreateMaybeMessage< ::ZombieRefreshData >(GetArenaForAllocation());
  }
  return _impl_.content_.zombierefresh_;
}
inline ::ZombieRefreshData* PkgData::mutable_zombierefresh() {
  ::ZombieRefreshData* _msg = _internal_mutable_zombierefresh();
  // @@protoc_insertion_point(field_mutable:PkgData.zombieRefresh)
  return _msg;
}

inline bool PkgData::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void PkgData::clear_has_content() {
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}
inline PkgData::ContentCase PkgData::content_case() const {
  return PkgData::ContentCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HeartData

// int32 count = 1;
inline void HeartData::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t HeartData::_internal_count() const {
  return _impl_.count_;
}
inline int32_t HeartData::count() const {
  // @@protoc_insertion_point(field_get:HeartData.count)
  return _internal_count();
}
inline void HeartData::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void HeartData::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:HeartData.count)
}

// -------------------------------------------------------------------

// SunData

// int32 sunValue = 1;
inline void SunData::clear_sunvalue() {
  _impl_.sunvalue_ = 0;
}
inline int32_t SunData::_internal_sunvalue() const {
  return _impl_.sunvalue_;
}
inline int32_t SunData::sunvalue() const {
  // @@protoc_insertion_point(field_get:SunData.sunValue)
  return _internal_sunvalue();
}
inline void SunData::_internal_set_sunvalue(int32_t value) {
  
  _impl_.sunvalue_ = value;
}
inline void SunData::set_sunvalue(int32_t value) {
  _internal_set_sunvalue(value);
  // @@protoc_insertion_point(field_set:SunData.sunValue)
}

// -------------------------------------------------------------------

// PlantData

// int32 line = 1;
inline void PlantData::clear_line() {
  _impl_.line_ = 0;
}
inline int32_t PlantData::_internal_line() const {
  return _impl_.line_;
}
inline int32_t PlantData::line() const {
  // @@protoc_insertion_point(field_get:PlantData.line)
  return _internal_line();
}
inline void PlantData::_internal_set_line(int32_t value) {
  
  _impl_.line_ = value;
}
inline void PlantData::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:PlantData.line)
}

// int32 row = 2;
inline void PlantData::clear_row() {
  _impl_.row_ = 0;
}
inline int32_t PlantData::_internal_row() const {
  return _impl_.row_;
}
inline int32_t PlantData::row() const {
  // @@protoc_insertion_point(field_get:PlantData.row)
  return _internal_row();
}
inline void PlantData::_internal_set_row(int32_t value) {
  
  _impl_.row_ = value;
}
inline void PlantData::set_row(int32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:PlantData.row)
}

// int32 type = 3;
inline void PlantData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t PlantData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t PlantData::type() const {
  // @@protoc_insertion_point(field_get:PlantData.type)
  return _internal_type();
}
inline void PlantData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void PlantData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PlantData.type)
}

// int32 hp = 4;
inline void PlantData::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t PlantData::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t PlantData::hp() const {
  // @@protoc_insertion_point(field_get:PlantData.hp)
  return _internal_hp();
}
inline void PlantData::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void PlantData::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:PlantData.hp)
}

// int32 maxHp = 5;
inline void PlantData::clear_maxhp() {
  _impl_.maxhp_ = 0;
}
inline int32_t PlantData::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline int32_t PlantData::maxhp() const {
  // @@protoc_insertion_point(field_get:PlantData.maxHp)
  return _internal_maxhp();
}
inline void PlantData::_internal_set_maxhp(int32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void PlantData::set_maxhp(int32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:PlantData.maxHp)
}

// -------------------------------------------------------------------

// PlantRefreshData

// repeated .PlantData plants = 1;
inline int PlantRefreshData::_internal_plants_size() const {
  return _impl_.plants_.size();
}
inline int PlantRefreshData::plants_size() const {
  return _internal_plants_size();
}
inline void PlantRefreshData::clear_plants() {
  _impl_.plants_.Clear();
}
inline ::PlantData* PlantRefreshData::mutable_plants(int index) {
  // @@protoc_insertion_point(field_mutable:PlantRefreshData.plants)
  return _impl_.plants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlantData >*
PlantRefreshData::mutable_plants() {
  // @@protoc_insertion_point(field_mutable_list:PlantRefreshData.plants)
  return &_impl_.plants_;
}
inline const ::PlantData& PlantRefreshData::_internal_plants(int index) const {
  return _impl_.plants_.Get(index);
}
inline const ::PlantData& PlantRefreshData::plants(int index) const {
  // @@protoc_insertion_point(field_get:PlantRefreshData.plants)
  return _internal_plants(index);
}
inline ::PlantData* PlantRefreshData::_internal_add_plants() {
  return _impl_.plants_.Add();
}
inline ::PlantData* PlantRefreshData::add_plants() {
  ::PlantData* _add = _internal_add_plants();
  // @@protoc_insertion_point(field_add:PlantRefreshData.plants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PlantData >&
PlantRefreshData::plants() const {
  // @@protoc_insertion_point(field_list:PlantRefreshData.plants)
  return _impl_.plants_;
}

// -------------------------------------------------------------------

// PlantPlacementData

// .PlantData plant = 1;
inline bool PlantPlacementData::_internal_has_plant() const {
  return this != internal_default_instance() && _impl_.plant_ != nullptr;
}
inline bool PlantPlacementData::has_plant() const {
  return _internal_has_plant();
}
inline void PlantPlacementData::clear_plant() {
  if (GetArenaForAllocation() == nullptr && _impl_.plant_ != nullptr) {
    delete _impl_.plant_;
  }
  _impl_.plant_ = nullptr;
}
inline const ::PlantData& PlantPlacementData::_internal_plant() const {
  const ::PlantData* p = _impl_.plant_;
  return p != nullptr ? *p : reinterpret_cast<const ::PlantData&>(
      ::_PlantData_default_instance_);
}
inline const ::PlantData& PlantPlacementData::plant() const {
  // @@protoc_insertion_point(field_get:PlantPlacementData.plant)
  return _internal_plant();
}
inline void PlantPlacementData::unsafe_arena_set_allocated_plant(
    ::PlantData* plant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plant_);
  }
  _impl_.plant_ = plant;
  if (plant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PlantPlacementData.plant)
}
inline ::PlantData* PlantPlacementData::release_plant() {
  
  ::PlantData* temp = _impl_.plant_;
  _impl_.plant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PlantData* PlantPlacementData::unsafe_arena_release_plant() {
  // @@protoc_insertion_point(field_release:PlantPlacementData.plant)
  
  ::PlantData* temp = _impl_.plant_;
  _impl_.plant_ = nullptr;
  return temp;
}
inline ::PlantData* PlantPlacementData::_internal_mutable_plant() {
  
  if (_impl_.plant_ == nullptr) {
    auto* p = CreateMaybeMessage<::PlantData>(GetArenaForAllocation());
    _impl_.plant_ = p;
  }
  return _impl_.plant_;
}
inline ::PlantData* PlantPlacementData::mutable_plant() {
  ::PlantData* _msg = _internal_mutable_plant();
  // @@protoc_insertion_point(field_mutable:PlantPlacementData.plant)
  return _msg;
}
inline void PlantPlacementData::set_allocated_plant(::PlantData* plant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.plant_;
  }
  if (plant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plant);
    if (message_arena != submessage_arena) {
      plant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plant, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.plant_ = plant;
  // @@protoc_insertion_point(field_set_allocated:PlantPlacementData.plant)
}

// -------------------------------------------------------------------

// ZombieData

// int32 line = 1;
inline void ZombieData::clear_line() {
  _impl_.line_ = 0;
}
inline int32_t ZombieData::_internal_line() const {
  return _impl_.line_;
}
inline int32_t ZombieData::line() const {
  // @@protoc_insertion_point(field_get:ZombieData.line)
  return _internal_line();
}
inline void ZombieData::_internal_set_line(int32_t value) {
  
  _impl_.line_ = value;
}
inline void ZombieData::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:ZombieData.line)
}

// float x = 2;
inline void ZombieData::clear_x() {
  _impl_.x_ = 0;
}
inline float ZombieData::_internal_x() const {
  return _impl_.x_;
}
inline float ZombieData::x() const {
  // @@protoc_insertion_point(field_get:ZombieData.x)
  return _internal_x();
}
inline void ZombieData::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void ZombieData::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ZombieData.x)
}

// int32 type = 3;
inline void ZombieData::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t ZombieData::_internal_type() const {
  return _impl_.type_;
}
inline int32_t ZombieData::type() const {
  // @@protoc_insertion_point(field_get:ZombieData.type)
  return _internal_type();
}
inline void ZombieData::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void ZombieData::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ZombieData.type)
}

// int32 hp = 4;
inline void ZombieData::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t ZombieData::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t ZombieData::hp() const {
  // @@protoc_insertion_point(field_get:ZombieData.hp)
  return _internal_hp();
}
inline void ZombieData::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void ZombieData::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:ZombieData.hp)
}

// int32 maxHp = 5;
inline void ZombieData::clear_maxhp() {
  _impl_.maxhp_ = 0;
}
inline int32_t ZombieData::_internal_maxhp() const {
  return _impl_.maxhp_;
}
inline int32_t ZombieData::maxhp() const {
  // @@protoc_insertion_point(field_get:ZombieData.maxHp)
  return _internal_maxhp();
}
inline void ZombieData::_internal_set_maxhp(int32_t value) {
  
  _impl_.maxhp_ = value;
}
inline void ZombieData::set_maxhp(int32_t value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:ZombieData.maxHp)
}

// -------------------------------------------------------------------

// ZombieRefreshData

// repeated .ZombieData zombies = 1;
inline int ZombieRefreshData::_internal_zombies_size() const {
  return _impl_.zombies_.size();
}
inline int ZombieRefreshData::zombies_size() const {
  return _internal_zombies_size();
}
inline void ZombieRefreshData::clear_zombies() {
  _impl_.zombies_.Clear();
}
inline ::ZombieData* ZombieRefreshData::mutable_zombies(int index) {
  // @@protoc_insertion_point(field_mutable:ZombieRefreshData.zombies)
  return _impl_.zombies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZombieData >*
ZombieRefreshData::mutable_zombies() {
  // @@protoc_insertion_point(field_mutable_list:ZombieRefreshData.zombies)
  return &_impl_.zombies_;
}
inline const ::ZombieData& ZombieRefreshData::_internal_zombies(int index) const {
  return _impl_.zombies_.Get(index);
}
inline const ::ZombieData& ZombieRefreshData::zombies(int index) const {
  // @@protoc_insertion_point(field_get:ZombieRefreshData.zombies)
  return _internal_zombies(index);
}
inline ::ZombieData* ZombieRefreshData::_internal_add_zombies() {
  return _impl_.zombies_.Add();
}
inline ::ZombieData* ZombieRefreshData::add_zombies() {
  ::ZombieData* _add = _internal_add_zombies();
  // @@protoc_insertion_point(field_add:ZombieRefreshData.zombies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZombieData >&
ZombieRefreshData::zombies() const {
  // @@protoc_insertion_point(field_list:ZombieRefreshData.zombies)
  return _impl_.zombies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PkgData_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PkgData_DataType>() {
  return ::PkgData_DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto

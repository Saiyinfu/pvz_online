// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR PkgData::PkgData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.content_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PkgDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PkgDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PkgDataDefaultTypeInternal() {}
  union {
    PkgData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PkgDataDefaultTypeInternal _PkgData_default_instance_;
PROTOBUF_CONSTEXPR HeartData::HeartData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartDataDefaultTypeInternal() {}
  union {
    HeartData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartDataDefaultTypeInternal _HeartData_default_instance_;
PROTOBUF_CONSTEXPR SunData::SunData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sunvalue_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SunDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SunDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SunDataDefaultTypeInternal() {}
  union {
    SunData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SunDataDefaultTypeInternal _SunData_default_instance_;
PROTOBUF_CONSTEXPR PlantData::PlantData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_.row_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.maxhp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlantDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlantDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlantDataDefaultTypeInternal() {}
  union {
    PlantData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlantDataDefaultTypeInternal _PlantData_default_instance_;
PROTOBUF_CONSTEXPR PlantRefreshData::PlantRefreshData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plants_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlantRefreshDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlantRefreshDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlantRefreshDataDefaultTypeInternal() {}
  union {
    PlantRefreshData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlantRefreshDataDefaultTypeInternal _PlantRefreshData_default_instance_;
PROTOBUF_CONSTEXPR PlantPlacementData::PlantPlacementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plant_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlantPlacementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlantPlacementDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlantPlacementDataDefaultTypeInternal() {}
  union {
    PlantPlacementData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlantPlacementDataDefaultTypeInternal _PlantPlacementData_default_instance_;
PROTOBUF_CONSTEXPR ZombieData::ZombieData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.maxhp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZombieDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZombieDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZombieDataDefaultTypeInternal() {}
  union {
    ZombieData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZombieDataDefaultTypeInternal _ZombieData_default_instance_;
PROTOBUF_CONSTEXPR ZombieRefreshData::ZombieRefreshData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.zombies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ZombieRefreshDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZombieRefreshDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZombieRefreshDataDefaultTypeInternal() {}
  union {
    ZombieRefreshData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZombieRefreshDataDefaultTypeInternal _ZombieRefreshData_default_instance_;
static ::_pb::Metadata file_level_metadata_data_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_data_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const uint32_t TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PkgData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PkgData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PkgData, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::PkgData, _impl_.playername_),
  PROTOBUF_FIELD_OFFSET(::PkgData, _impl_.type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PkgData, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HeartData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HeartData, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SunData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SunData, _impl_.sunvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlantData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlantData, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::PlantData, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::PlantData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::PlantData, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::PlantData, _impl_.maxhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlantRefreshData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlantRefreshData, _impl_.plants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlantPlacementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PlantPlacementData, _impl_.plant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZombieData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZombieData, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::ZombieData, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ZombieData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::ZombieData, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::ZombieData, _impl_.maxhp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZombieRefreshData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ZombieRefreshData, _impl_.zombies_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PkgData)},
  { 13, -1, -1, sizeof(::HeartData)},
  { 20, -1, -1, sizeof(::SunData)},
  { 27, -1, -1, sizeof(::PlantData)},
  { 38, -1, -1, sizeof(::PlantRefreshData)},
  { 45, -1, -1, sizeof(::PlantPlacementData)},
  { 52, -1, -1, sizeof(::ZombieData)},
  { 63, -1, -1, sizeof(::ZombieRefreshData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_PkgData_default_instance_._instance,
  &::_HeartData_default_instance_._instance,
  &::_SunData_default_instance_._instance,
  &::_PlantData_default_instance_._instance,
  &::_PlantRefreshData_default_instance_._instance,
  &::_PlantPlacementData_default_instance_._instance,
  &::_ZombieData_default_instance_._instance,
  &::_ZombieRefreshData_default_instance_._instance,
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\"\321\002\n\007PkgData\022\020\n\010playerId\030\006 \001"
  "(\005\022\022\n\nplayerName\030\001 \001(\t\022\037\n\004type\030\002 \001(\0162\021.P"
  "kgData.DataType\022\027\n\003sun\030\003 \001(\0132\010.SunDataH\000"
  "\022)\n\014plantRefresh\030\004 \001(\0132\021.PlantRefreshDat"
  "aH\000\022+\n\rzombieRefresh\030\005 \001(\0132\022.ZombieRefre"
  "shDataH\000\"\202\001\n\010DataType\022\t\n\005HELLO\020\000\022\t\n\005HEAR"
  "T\020\001\022\021\n\rPLANT_REFRESH\020\002\022\023\n\017PLANT_PLACEMEN"
  "T\020\003\022\022\n\016ZOMBIE_REFRESH\020\004\022\025\n\021ZOMBIE_GENARA"
  "TION\020\005\022\r\n\tSUN_FRESH\020\006B\t\n\007content\"\032\n\tHear"
  "tData\022\r\n\005count\030\001 \001(\005\"\033\n\007SunData\022\020\n\010sunVa"
  "lue\030\001 \001(\005\"O\n\tPlantData\022\014\n\004line\030\001 \001(\005\022\013\n\003"
  "row\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\n\n\002hp\030\004 \001(\005\022\r\n\005m"
  "axHp\030\005 \001(\005\".\n\020PlantRefreshData\022\032\n\006plants"
  "\030\001 \003(\0132\n.PlantData\"/\n\022PlantPlacementData"
  "\022\031\n\005plant\030\001 \001(\0132\n.PlantData\"N\n\nZombieDat"
  "a\022\014\n\004line\030\001 \001(\005\022\t\n\001x\030\002 \001(\002\022\014\n\004type\030\003 \001(\005"
  "\022\n\n\002hp\030\004 \001(\005\022\r\n\005maxHp\030\005 \001(\005\"1\n\021ZombieRef"
  "reshData\022\034\n\007zombies\030\001 \003(\0132\013.ZombieDatab\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_data_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_2eproto = {
    false, false, 726, descriptor_table_protodef_data_2eproto,
    "data.proto",
    &descriptor_table_data_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_data_2eproto::offsets,
    file_level_metadata_data_2eproto, file_level_enum_descriptors_data_2eproto,
    file_level_service_descriptors_data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_2eproto_getter() {
  return &descriptor_table_data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_2eproto(&descriptor_table_data_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PkgData_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_2eproto);
  return file_level_enum_descriptors_data_2eproto[0];
}
bool PkgData_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PkgData_DataType PkgData::HELLO;
constexpr PkgData_DataType PkgData::HEART;
constexpr PkgData_DataType PkgData::PLANT_REFRESH;
constexpr PkgData_DataType PkgData::PLANT_PLACEMENT;
constexpr PkgData_DataType PkgData::ZOMBIE_REFRESH;
constexpr PkgData_DataType PkgData::ZOMBIE_GENARATION;
constexpr PkgData_DataType PkgData::SUN_FRESH;
constexpr PkgData_DataType PkgData::DataType_MIN;
constexpr PkgData_DataType PkgData::DataType_MAX;
constexpr int PkgData::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PkgData::_Internal {
 public:
  static const ::SunData& sun(const PkgData* msg);
  static const ::PlantRefreshData& plantrefresh(const PkgData* msg);
  static const ::ZombieRefreshData& zombierefresh(const PkgData* msg);
};

const ::SunData&
PkgData::_Internal::sun(const PkgData* msg) {
  return *msg->_impl_.content_.sun_;
}
const ::PlantRefreshData&
PkgData::_Internal::plantrefresh(const PkgData* msg) {
  return *msg->_impl_.content_.plantrefresh_;
}
const ::ZombieRefreshData&
PkgData::_Internal::zombierefresh(const PkgData* msg) {
  return *msg->_impl_.content_.zombierefresh_;
}
void PkgData::set_allocated_sun(::SunData* sun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (sun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sun);
    if (message_arena != submessage_arena) {
      sun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun, submessage_arena);
    }
    set_has_sun();
    _impl_.content_.sun_ = sun;
  }
  // @@protoc_insertion_point(field_set_allocated:PkgData.sun)
}
void PkgData::set_allocated_plantrefresh(::PlantRefreshData* plantrefresh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (plantrefresh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plantrefresh);
    if (message_arena != submessage_arena) {
      plantrefresh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plantrefresh, submessage_arena);
    }
    set_has_plantrefresh();
    _impl_.content_.plantrefresh_ = plantrefresh;
  }
  // @@protoc_insertion_point(field_set_allocated:PkgData.plantRefresh)
}
void PkgData::set_allocated_zombierefresh(::ZombieRefreshData* zombierefresh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_content();
  if (zombierefresh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zombierefresh);
    if (message_arena != submessage_arena) {
      zombierefresh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zombierefresh, submessage_arena);
    }
    set_has_zombierefresh();
    _impl_.content_.zombierefresh_ = zombierefresh;
  }
  // @@protoc_insertion_point(field_set_allocated:PkgData.zombieRefresh)
}
PkgData::PkgData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PkgData)
}
PkgData::PkgData(const PkgData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PkgData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playername_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playername().empty()) {
    _this->_impl_.playername_.Set(from._internal_playername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.playerid_));
  clear_has_content();
  switch (from.content_case()) {
    case kSun: {
      _this->_internal_mutable_sun()->::SunData::MergeFrom(
          from._internal_sun());
      break;
    }
    case kPlantRefresh: {
      _this->_internal_mutable_plantrefresh()->::PlantRefreshData::MergeFrom(
          from._internal_plantrefresh());
      break;
    }
    case kZombieRefresh: {
      _this->_internal_mutable_zombierefresh()->::ZombieRefreshData::MergeFrom(
          from._internal_zombierefresh());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PkgData)
}

inline void PkgData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playername_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.playerid_){0}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.playername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_content();
}

PkgData::~PkgData() {
  // @@protoc_insertion_point(destructor:PkgData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PkgData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playername_.Destroy();
  if (has_content()) {
    clear_content();
  }
}

void PkgData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PkgData::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:PkgData)
  switch (content_case()) {
    case kSun: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.sun_;
      }
      break;
    }
    case kPlantRefresh: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.plantrefresh_;
      }
      break;
    }
    case kZombieRefresh: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.content_.zombierefresh_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CONTENT_NOT_SET;
}


void PkgData::Clear() {
// @@protoc_insertion_point(message_clear_start:PkgData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playername_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.playerid_));
  clear_content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PkgData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string playerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "PkgData.playerName"));
        } else
          goto handle_unusual;
        continue;
      // .PkgData.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::PkgData_DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .SunData sun = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sun(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PlantRefreshData plantRefresh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_plantrefresh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ZombieRefreshData zombieRefresh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_zombierefresh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PkgData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PkgData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerName = 1;
  if (!this->_internal_playername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PkgData.playerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  // .PkgData.DataType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .SunData sun = 3;
  if (_internal_has_sun()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sun(this),
        _Internal::sun(this).GetCachedSize(), target, stream);
  }

  // .PlantRefreshData plantRefresh = 4;
  if (_internal_has_plantrefresh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::plantrefresh(this),
        _Internal::plantrefresh(this).GetCachedSize(), target, stream);
  }

  // .ZombieRefreshData zombieRefresh = 5;
  if (_internal_has_zombierefresh()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::zombierefresh(this),
        _Internal::zombierefresh(this).GetCachedSize(), target, stream);
  }

  // int32 playerId = 6;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PkgData)
  return target;
}

size_t PkgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PkgData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerName = 1;
  if (!this->_internal_playername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  // .PkgData.DataType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 playerId = 6;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  switch (content_case()) {
    // .SunData sun = 3;
    case kSun: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.sun_);
      break;
    }
    // .PlantRefreshData plantRefresh = 4;
    case kPlantRefresh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.plantrefresh_);
      break;
    }
    // .ZombieRefreshData zombieRefresh = 5;
    case kZombieRefresh: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.content_.zombierefresh_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PkgData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PkgData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PkgData::GetClassData() const { return &_class_data_; }


void PkgData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PkgData*>(&to_msg);
  auto& from = static_cast<const PkgData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PkgData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playername().empty()) {
    _this->_internal_set_playername(from._internal_playername());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  switch (from.content_case()) {
    case kSun: {
      _this->_internal_mutable_sun()->::SunData::MergeFrom(
          from._internal_sun());
      break;
    }
    case kPlantRefresh: {
      _this->_internal_mutable_plantrefresh()->::PlantRefreshData::MergeFrom(
          from._internal_plantrefresh());
      break;
    }
    case kZombieRefresh: {
      _this->_internal_mutable_zombierefresh()->::ZombieRefreshData::MergeFrom(
          from._internal_zombierefresh());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PkgData::CopyFrom(const PkgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PkgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkgData::IsInitialized() const {
  return true;
}

void PkgData::InternalSwap(PkgData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playername_, lhs_arena,
      &other->_impl_.playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PkgData, _impl_.playerid_)
      + sizeof(PkgData::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(PkgData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
  swap(_impl_.content_, other->_impl_.content_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PkgData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[0]);
}

// ===================================================================

class HeartData::_Internal {
 public:
};

HeartData::HeartData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HeartData)
}
HeartData::HeartData(const HeartData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:HeartData)
}

inline void HeartData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartData::~HeartData() {
  // @@protoc_insertion_point(destructor:HeartData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartData::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartData)
  return target;
}

size_t HeartData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartData::GetClassData() const { return &_class_data_; }


void HeartData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartData*>(&to_msg);
  auto& from = static_cast<const HeartData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HeartData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartData::CopyFrom(const HeartData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartData::IsInitialized() const {
  return true;
}

void HeartData::InternalSwap(HeartData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[1]);
}

// ===================================================================

class SunData::_Internal {
 public:
};

SunData::SunData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SunData)
}
SunData::SunData(const SunData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SunData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sunvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sunvalue_ = from._impl_.sunvalue_;
  // @@protoc_insertion_point(copy_constructor:SunData)
}

inline void SunData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sunvalue_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SunData::~SunData() {
  // @@protoc_insertion_point(destructor:SunData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SunData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SunData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SunData::Clear() {
// @@protoc_insertion_point(message_clear_start:SunData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sunvalue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SunData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sunValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sunvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SunData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SunData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sunValue = 1;
  if (this->_internal_sunvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sunvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SunData)
  return target;
}

size_t SunData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SunData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sunValue = 1;
  if (this->_internal_sunvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sunvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SunData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SunData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SunData::GetClassData() const { return &_class_data_; }


void SunData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SunData*>(&to_msg);
  auto& from = static_cast<const SunData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SunData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sunvalue() != 0) {
    _this->_internal_set_sunvalue(from._internal_sunvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SunData::CopyFrom(const SunData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SunData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SunData::IsInitialized() const {
  return true;
}

void SunData::InternalSwap(SunData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sunvalue_, other->_impl_.sunvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SunData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[2]);
}

// ===================================================================

class PlantData::_Internal {
 public:
};

PlantData::PlantData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlantData)
}
PlantData::PlantData(const PlantData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlantData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.maxhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_, &from._impl_.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxhp_) -
    reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.maxhp_));
  // @@protoc_insertion_point(copy_constructor:PlantData)
}

inline void PlantData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){0}
    , decltype(_impl_.row_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.maxhp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlantData::~PlantData() {
  // @@protoc_insertion_point(destructor:PlantData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlantData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlantData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlantData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlantData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxhp_) -
      reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.maxhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlantData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxHp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlantData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlantData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 row = 2;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_row(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 hp = 4;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hp(), target);
  }

  // int32 maxHp = 5;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlantData)
  return target;
}

size_t PlantData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlantData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  // int32 row = 2;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_row());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 hp = 4;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 maxHp = 5;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxhp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlantData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlantData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlantData::GetClassData() const { return &_class_data_; }


void PlantData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlantData*>(&to_msg);
  auto& from = static_cast<const PlantData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlantData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlantData::CopyFrom(const PlantData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlantData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantData::IsInitialized() const {
  return true;
}

void PlantData::InternalSwap(PlantData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlantData, _impl_.maxhp_)
      + sizeof(PlantData::_impl_.maxhp_)
      - PROTOBUF_FIELD_OFFSET(PlantData, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlantData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[3]);
}

// ===================================================================

class PlantRefreshData::_Internal {
 public:
};

PlantRefreshData::PlantRefreshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlantRefreshData)
}
PlantRefreshData::PlantRefreshData(const PlantRefreshData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlantRefreshData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plants_){from._impl_.plants_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PlantRefreshData)
}

inline void PlantRefreshData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plants_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlantRefreshData::~PlantRefreshData() {
  // @@protoc_insertion_point(destructor:PlantRefreshData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlantRefreshData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plants_.~RepeatedPtrField();
}

void PlantRefreshData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlantRefreshData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlantRefreshData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlantRefreshData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .PlantData plants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlantRefreshData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlantRefreshData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .PlantData plants = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_plants_size()); i < n; i++) {
    const auto& repfield = this->_internal_plants(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlantRefreshData)
  return target;
}

size_t PlantRefreshData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlantRefreshData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PlantData plants = 1;
  total_size += 1UL * this->_internal_plants_size();
  for (const auto& msg : this->_impl_.plants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlantRefreshData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlantRefreshData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlantRefreshData::GetClassData() const { return &_class_data_; }


void PlantRefreshData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlantRefreshData*>(&to_msg);
  auto& from = static_cast<const PlantRefreshData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlantRefreshData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.plants_.MergeFrom(from._impl_.plants_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlantRefreshData::CopyFrom(const PlantRefreshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlantRefreshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantRefreshData::IsInitialized() const {
  return true;
}

void PlantRefreshData::InternalSwap(PlantRefreshData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.plants_.InternalSwap(&other->_impl_.plants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlantRefreshData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[4]);
}

// ===================================================================

class PlantPlacementData::_Internal {
 public:
  static const ::PlantData& plant(const PlantPlacementData* msg);
};

const ::PlantData&
PlantPlacementData::_Internal::plant(const PlantPlacementData* msg) {
  return *msg->_impl_.plant_;
}
PlantPlacementData::PlantPlacementData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:PlantPlacementData)
}
PlantPlacementData::PlantPlacementData(const PlantPlacementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlantPlacementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plant_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plant()) {
    _this->_impl_.plant_ = new ::PlantData(*from._impl_.plant_);
  }
  // @@protoc_insertion_point(copy_constructor:PlantPlacementData)
}

inline void PlantPlacementData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plant_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlantPlacementData::~PlantPlacementData() {
  // @@protoc_insertion_point(destructor:PlantPlacementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlantPlacementData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plant_;
}

void PlantPlacementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlantPlacementData::Clear() {
// @@protoc_insertion_point(message_clear_start:PlantPlacementData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.plant_ != nullptr) {
    delete _impl_.plant_;
  }
  _impl_.plant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlantPlacementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .PlantData plant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlantPlacementData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlantPlacementData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .PlantData plant = 1;
  if (this->_internal_has_plant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plant(this),
        _Internal::plant(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlantPlacementData)
  return target;
}

size_t PlantPlacementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlantPlacementData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PlantData plant = 1;
  if (this->_internal_has_plant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plant_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlantPlacementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlantPlacementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlantPlacementData::GetClassData() const { return &_class_data_; }


void PlantPlacementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlantPlacementData*>(&to_msg);
  auto& from = static_cast<const PlantPlacementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:PlantPlacementData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plant()) {
    _this->_internal_mutable_plant()->::PlantData::MergeFrom(
        from._internal_plant());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlantPlacementData::CopyFrom(const PlantPlacementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlantPlacementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantPlacementData::IsInitialized() const {
  return true;
}

void PlantPlacementData::InternalSwap(PlantPlacementData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.plant_, other->_impl_.plant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlantPlacementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[5]);
}

// ===================================================================

class ZombieData::_Internal {
 public:
};

ZombieData::ZombieData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZombieData)
}
ZombieData::ZombieData(const ZombieData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZombieData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.maxhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_, &from._impl_.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxhp_) -
    reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.maxhp_));
  // @@protoc_insertion_point(copy_constructor:ZombieData)
}

inline void ZombieData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.line_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.maxhp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ZombieData::~ZombieData() {
  // @@protoc_insertion_point(destructor:ZombieData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZombieData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZombieData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZombieData::Clear() {
// @@protoc_insertion_point(message_clear_start:ZombieData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxhp_) -
      reinterpret_cast<char*>(&_impl_.line_)) + sizeof(_impl_.maxhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZombieData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 maxHp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZombieData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZombieData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 hp = 4;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hp(), target);
  }

  // int32 maxHp = 5;
  if (this->_internal_maxhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZombieData)
  return target;
}

size_t ZombieData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZombieData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 hp = 4;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 maxHp = 5;
  if (this->_internal_maxhp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxhp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZombieData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZombieData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZombieData::GetClassData() const { return &_class_data_; }


void ZombieData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZombieData*>(&to_msg);
  auto& from = static_cast<const ZombieData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZombieData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _this->_internal_set_line(from._internal_line());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_maxhp() != 0) {
    _this->_internal_set_maxhp(from._internal_maxhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZombieData::CopyFrom(const ZombieData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZombieData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZombieData::IsInitialized() const {
  return true;
}

void ZombieData::InternalSwap(ZombieData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZombieData, _impl_.maxhp_)
      + sizeof(ZombieData::_impl_.maxhp_)
      - PROTOBUF_FIELD_OFFSET(ZombieData, _impl_.line_)>(
          reinterpret_cast<char*>(&_impl_.line_),
          reinterpret_cast<char*>(&other->_impl_.line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZombieData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[6]);
}

// ===================================================================

class ZombieRefreshData::_Internal {
 public:
};

ZombieRefreshData::ZombieRefreshData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ZombieRefreshData)
}
ZombieRefreshData::ZombieRefreshData(const ZombieRefreshData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ZombieRefreshData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.zombies_){from._impl_.zombies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZombieRefreshData)
}

inline void ZombieRefreshData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.zombies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ZombieRefreshData::~ZombieRefreshData() {
  // @@protoc_insertion_point(destructor:ZombieRefreshData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZombieRefreshData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zombies_.~RepeatedPtrField();
}

void ZombieRefreshData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZombieRefreshData::Clear() {
// @@protoc_insertion_point(message_clear_start:ZombieRefreshData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zombies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZombieRefreshData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ZombieData zombies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zombies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ZombieRefreshData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZombieRefreshData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZombieData zombies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_zombies_size()); i < n; i++) {
    const auto& repfield = this->_internal_zombies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZombieRefreshData)
  return target;
}

size_t ZombieRefreshData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZombieRefreshData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZombieData zombies = 1;
  total_size += 1UL * this->_internal_zombies_size();
  for (const auto& msg : this->_impl_.zombies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZombieRefreshData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ZombieRefreshData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZombieRefreshData::GetClassData() const { return &_class_data_; }


void ZombieRefreshData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ZombieRefreshData*>(&to_msg);
  auto& from = static_cast<const ZombieRefreshData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ZombieRefreshData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.zombies_.MergeFrom(from._impl_.zombies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZombieRefreshData::CopyFrom(const ZombieRefreshData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZombieRefreshData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZombieRefreshData::IsInitialized() const {
  return true;
}

void ZombieRefreshData::InternalSwap(ZombieRefreshData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.zombies_.InternalSwap(&other->_impl_.zombies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZombieRefreshData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PkgData*
Arena::CreateMaybeMessage< ::PkgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PkgData >(arena);
}
template<> PROTOBUF_NOINLINE ::HeartData*
Arena::CreateMaybeMessage< ::HeartData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HeartData >(arena);
}
template<> PROTOBUF_NOINLINE ::SunData*
Arena::CreateMaybeMessage< ::SunData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SunData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlantData*
Arena::CreateMaybeMessage< ::PlantData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlantData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlantRefreshData*
Arena::CreateMaybeMessage< ::PlantRefreshData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlantRefreshData >(arena);
}
template<> PROTOBUF_NOINLINE ::PlantPlacementData*
Arena::CreateMaybeMessage< ::PlantPlacementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PlantPlacementData >(arena);
}
template<> PROTOBUF_NOINLINE ::ZombieData*
Arena::CreateMaybeMessage< ::ZombieData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZombieData >(arena);
}
template<> PROTOBUF_NOINLINE ::ZombieRefreshData*
Arena::CreateMaybeMessage< ::ZombieRefreshData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZombieRefreshData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
